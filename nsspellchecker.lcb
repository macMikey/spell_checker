library community.livecode.trevordevore.nsspellchecker

  use com.livecode.foreign
  use com.livecode.objc

  metadata title is "Spell Checker NSSpellChecker"
  metadata author is "Trevor DeVore"
  metadata version is "0.1.2"

  public foreign type NSRange binds to "MCAggregateTypeInfo:pp"

  foreign handler CompareRange(inout pLeft as NSRange, inout pRight as NSRange, in pSize as UIntSize) returns CInt binds to "memcmp"

  private foreign handler ObjC_NSSpellCheckerSharedSpellChecker() \
        returns ObjcId binds to "objc:NSSpellChecker.+sharedSpellChecker"
  private foreign handler ObjC_NSSpellCheckerSharedSpellCheckerExists() \
        returns CBool binds to "objc:NSSpellChecker.+sharedSpellCheckerExists"

  private foreign handler ObjC_NSSpellCheckerUniqueSpellDocumentTag() \
        returns CInt binds to "objc:NSSpellChecker.+uniqueSpellDocumentTag"
  private foreign handler ObjC_NSSpellCheckerCloseSpellDocumentWithTag(in pObj as ObjcId, in pDocTag as CInt) \
        returns nothing binds to "objc:NSSpellChecker.-closeSpellDocumentWithTag:"
  private foreign handler ObjC_NSSpellCheckerIgnoreWord(in pObj as ObjcId, in pString as ObjcId, in pDocTag as CInt) \
        returns nothing binds to "objc:NSSpellChecker.-ignoreWord:inSpellDocumentWithTag:"
  private foreign handler ObjC_NSSpellCheckerIgnoredWords(in pObj as ObjcId, in pDocTag as CInt) \
        returns ObjcId binds to "objc:NSSpellChecker.-ignoredWordsInSpellDocumentWithTag:"
  private foreign handler ObjC_NSSpellCheckerSetIgnoredWords(in pObj as ObjcId, in pArrayOfWords as ObjcId, in pDocTag as CInt) \
        returns nothing binds to "objc:NSSpellChecker.-setIgnoredWords:inSpellDocumentWithTag:"

  private foreign handler ObjC_NSSpellCheckerHasLearnedWord(in pObj as ObjcId, in pWord as ObjcId) \
        returns CBool binds to "objc:NSSpellChecker.-hasLearnedWord:"
  private foreign handler ObjC_NSSpellCheckerUnlearnWord(in pObj as ObjcId, in pWord as ObjcId) \
        returns nothing binds to "objc:NSSpellChecker.-unlearnWord:"
  private foreign handler ObjC_NSSpellCheckerLearnWord(in pObj as ObjcId, in pWord as ObjcId) \
        returns nothing binds to "objc:NSSpellChecker.-learnWord:"

  private foreign handler ObjC_NSSpellCheckerAvailableLanguages (in pObj as ObjcId) \
        returns ObjcId binds to "objc:NSSpellChecker.-availableLanguages"
  private foreign handler ObjC_NSSpellCheckerUserPreferredLanguages (in pObj as ObjcId) \
        returns ObjcId binds to "objc:NSSpellChecker.-userPreferredLanguages"
  private foreign handler ObjC_NSSpellCheckerGetAutomaticallyIdentifiesLanguages (in pObj as ObjcId) \
        returns CBool binds to "objc:NSSpellChecker.-automaticallyIdentifiesLanguages"
  private foreign handler ObjC_NSSpellCheckerSetAutomaticallyIdentifiesLanguages (in pObj as ObjcId, in pBoolean as CBool) \
        returns nothing binds to "objc:NSSpellChecker.-setAutomaticallyIdentifiesLanguages:"
  private foreign handler ObjC_NSSpellCheckerGetLanguage (in pObj as ObjcId) \
        returns ObjcId binds to "objc:NSSpellChecker.-language"
  private foreign handler ObjC_NSSpellCheckerSetLanguage (in pObj as ObjcId, in pLangCode as ObjcId) \
        returns CBool binds to "objc:NSSpellChecker.-setLanguage:"

  private foreign handler ObjC_NSSpellCheckerCountWordsInString (in pObj as ObjcId, in pString as ObjcId, in pLangCode as ObjcId) \
        returns CInt binds to "objc:NSSpellChecker.-countWordsInString:language:"
  private foreign handler ObjC_NSSpellCheckerCheckSpellingOfString (in pObj as ObjcId, in stringToCheck as ObjcId, in startAt as CInt) \
        returns NSRange binds to "objc:NSSpellChecker.-checkSpellingOfString:startingAt:"
  private foreign handler ObjC_NSSpellCheckerCheckSpellingOfStringWithOptions \
        (in pObj as ObjcId, in stringToCheck as ObjcId, in startAt as CInt, in pLanguage as optional ObjcId, in wrapFlag as CBool, in docTag as CUInt, out wordCount as CUInt) \
        returns NSRange binds to "objc:NSSpellChecker.-checkSpellingOfString:startingAt:language:wrap:inSpellDocumentWithTag:wordCount:"
  private foreign handler ObjC_NSSpellCheckerGuessesForWordRange (in pObj as ObjcId, in pNSRange as NSRange, in stringToCheck as ObjcId, in pLanguage as optional ObjcId, in docTag as CUInt) \
        returns ObjcId binds to "objc:NSSpellChecker.-guessesForWordRange:inString:language:inSpellDocumentWithTag:"


  private variable mNotFoundRange as NSRange


  public handler spellcheckerGuessesForWord(in pWord as String) returns String
    return NSSpellCheckerGuessesForWordRange(pWord, 1, nothing, "", nothing)
  end handler


  public handler spellcheckerDocumentTag() returns Number
    return NSSpellCheckerUniqueSpellDocumentTag()
  end handler


  public handler spellcheckerCloseDocumentWithTag(in pDocTag as optional Number) returns nothing
    NSSpellCheckerCloseSpellDocumentWithTag(pDocTag)
  end handler


  public handler spellcheckerSetIgnoredWords(in pWords as String, in pDocTag as optional Number) returns nothing
    NSSpellCheckerSetIgnoredWords(pWords, pDocTag)
  end handler


  public handler spellcheckerIgnoredWordsList(in pDocTag as optional Number) returns String
    return NSSpellCheckerIgnoredWords(pDocTag)
  end handler


  /**
  Summary: All available spellchecking languages in user preference order.

  Returns: String
  */
  public handler spellcheckerAvailableLanguages() returns String
    return NSSpellCheckerGetAvailableLanguages()
  end handler


  /**
  Summary: A subset of the availableLanguages, as selected by the user for use with spellchecking, in preference order.

  Returns: String
  */
  public handler spellcheckerUserPreferredLanguages() returns String
    return NSSpellCheckerGetUserPreferredLanguages()
  end handler


  public handler spellcheckerCheckSpellingOfStringWithOptions(in pString as String, in pStartingAt as optional Number, in pLanguage as optional String, in pWrapFlag as Boolean, in pDocTag as optional Number) returns String
    variable tRange as optional NSRange
    variable tFirstRange as optional NSRange
    variable tRangeList as optional List
    variable tLanguage as optional ObjcObject
    variable tSearchOffset as Number
    variable tWordCount as Number
    variable tResult as String

    // LC is 1-based. Obj-C is 0-based
    if pStartingAt is nothing then
      put 1 into pStartingAt
    end if
    put the maximum value of [0, pStartingAt-1] into pStartingAt
    put pStartingAt into tSearchOffset

    if pLanguage is nothing or pLanguage is empty then
      put nothing into tLanguage
    else
      put StringToNSString(pLanguage) into tLanguage
    end if

    if pDocTag is nothing then
      put 0 into pDocTag
    end if

    put the empty list into tRangeList

    variable tIndex as Integer

    unsafe
      repeat forever
        put ObjC_NSSpellCheckerCheckSpellingOfStringWithOptions(_sharedObject(), StringToNSString(pString), \
              tSearchOffset, tLanguage, pWrapFlag, pDocTag, tWordCount) into tRange

        if not NoErrorFound(tRange) then
          // Exit if check finds first range again or found range ends right before starting offset or spans starting offset
          if tRange is tFirstRange or (element 1 of tRange < pStartingAt and tSearchOffset >= pStartingAt - 1) then
            exit repeat
          end if

          push tRange onto tRangeList
          put element 1 of tRange + element 2 of tRange into tSearchOffset

          if tFirstRange is nothing then
            put tRange into tFirstRange
          end if
        else
          exit repeat
        end if
      end repeat
    end unsafe

    if tRangeList is not the empty list then
      repeat for each element tRange in tRangeList
        put (element 1 of tRange + 1) formatted as string \
            & "," & \
            (element 1 of tRange + element 2 of tRange) formatted as string & "\n" after tResult
      end repeat
      delete the last char of tResult

      return tResult
    else
      return ""
    end if
  end handler


  /**
  Summary: Workaround for bug https://quality.livecode.com/show_bug.cgi?id=21331

  Description:
  LCB cannot handle a NSIntegerMax on 64-bit systems. Using this workaround LCB
  never attempts to use an NSRange variable with NSIntegerMax set. That is, of course,
  unless you attempt to spell check a string that is really, really, really, really, really
  long. A risk we are willing to take.
  */
  private handler NoErrorFound(in pRange as optional NSRange) returns Boolean
    variable tSize as Number
    variable tResult as Number

    if the architecture ends with "64" then
      put 8 into tSize
    else
      put 4 into tSize
    end if

    unsafe
      put CompareRange(mNotFoundRange, pRange, tSize) into tResult
    end unsafe

    return tResult is 0
  end handler


  public handler NSSpellCheckerInitialize() returns nothing
    variable tWordCount as Number

    // Get a known "no error" NSRange to work around bug https://quality.livecode.com/show_bug.cgi?id=21331
    unsafe
      put ObjC_NSSpellCheckerCheckSpellingOfStringWithOptions(_sharedObject(), StringToNSString("the"), 0, StringToNSString("en"), false, 0, tWordCount) \
            into mNotFoundRange
    end unsafe
  end handler


  /**
  Summary: Tells you whether or not the shared spell checker has been initialized.

  Returns: Boolean
  */
  private handler NSSpellCheckerSharedSpellCheckerExists() returns Boolean
    variable tSpellChecker as ObjcObject
    variable tExists as Boolean

    unsafe
      put ObjC_NSSpellCheckerSharedSpellCheckerExists() into tExists
    end unsafe

    return tExists
  end handler


  /**
  Summary:

  Description:

  Returns: Integer
  */
  private handler NSSpellCheckerUniqueSpellDocumentTag() returns Number
    variable tDocTag as Number

    unsafe
      put ObjC_NSSpellCheckerUniqueSpellDocumentTag() into tDocTag
    end unsafe

    return tDocTag
  end handler


  /**
  Summary:

  Description:

  Returns:
  */
  private handler NSSpellCheckerCloseSpellDocumentWithTag(in pDocTag as optional Number) returns nothing
    variable sharedObject as ObjcObject

    if pDocTag is nothing then
      put 0 into pDocTag
    end if

    unsafe
      put ObjC_NSSpellCheckerSharedSpellChecker() into sharedObject
      ObjC_NSSpellCheckerCloseSpellDocumentWithTag(sharedObject, pDocTag)
    end unsafe
  end handler


  /**
  Summary:

  Description:

  Returns:
  */
  public handler NSSpellCheckerIgnoreWord(in pWord as String, in pDocTag as optional Number) returns nothing
    variable sharedObject as ObjcObject

    if pDocTag is nothing then
      put 0 into pDocTag
    end if

    unsafe
      put ObjC_NSSpellCheckerSharedSpellChecker() into sharedObject
      ObjC_NSSpellCheckerIgnoreWord(sharedObject, StringToNSString(pWord), pDocTag)
    end unsafe
  end handler


  /**
  Summary:

  Description:

  Returns: Integer
  */
  private handler NSSpellCheckerIgnoredWords(in pDocTag as optional Number) returns String
    variable sharedObject as ObjcObject
    variable nsArray as optional ObjcObject

    if pDocTag is nothing then
      put 0 into pDocTag
    end if

    unsafe
      put ObjC_NSSpellCheckerSharedSpellChecker() into sharedObject
      put ObjC_NSSpellCheckerIgnoredWords(sharedObject, pDocTag) into nsArray
    end unsafe

    if nsArray is not nothing then
      return _listAsString(ListFromNSArray(nsArray), "\n")
    else
      return ""
    end if
  end handler


  /**
  Summary:

  Description:

  Returns:
  */
  private handler NSSpellCheckerSetIgnoredWords(in pWords as String, in pDocTag as optional Number) returns nothing
    variable sharedObject as ObjcObject
    variable tWordList as List

    split pWords by "\n" into tWordList

    if pDocTag is nothing then
      put 0 into pDocTag
    end if

    // This doesn't seem to be working corretly.

    unsafe
      put ObjC_NSSpellCheckerSharedSpellChecker() into sharedObject
      ObjC_NSSpellCheckerSetIgnoredWords(sharedObject, ListToNSArray(tWordList), pDocTag)
    end unsafe
  end handler


  /**
  Summary:

  Description:

  Returns: Integer
  */
  private handler NSSpellCheckerHasLearnedWord(in pWord as String) returns Boolean
    variable sharedObject as ObjcObject
    variable tBoolean as Boolean

    unsafe
      put ObjC_NSSpellCheckerSharedSpellChecker() into sharedObject
      put ObjC_NSSpellCheckerHasLearnedWord(sharedObject, StringToNSString(pWord)) into tBoolean
    end unsafe

    return tBoolean
  end handler


  /**
  Summary:

  Description:

  Returns: Integer
  */
  public handler NSSpellCheckerUnlearnWord(in pWord as String) returns nothing
    variable sharedObject as ObjcObject

    unsafe
      put ObjC_NSSpellCheckerSharedSpellChecker() into sharedObject
      ObjC_NSSpellCheckerUnlearnWord(sharedObject, StringToNSString(pWord))
    end unsafe
  end handler


  /**
  Summary:

  Description:

  Returns: Integer
  */
  public handler NSSpellCheckerLearnWord(in pWord as String) returns nothing
    variable sharedObject as ObjcObject

    unsafe
      put ObjC_NSSpellCheckerSharedSpellChecker() into sharedObject
      ObjC_NSSpellCheckerLearnWord(sharedObject, StringToNSString(pWord))
    end unsafe
  end handler


  /**
  Summary: Provides a return-delimited list of all available languages.

  Description:

  Returns: Return-delimited list
  */
  private handler NSSpellCheckerGetAvailableLanguages() returns String
    variable sharedObject as ObjcObject
    variable nsArray as optional ObjcObject

    unsafe
      put ObjC_NSSpellCheckerSharedSpellChecker() into sharedObject
      put ObjC_NSSpellCheckerAvailableLanguages(sharedObject) into nsArray
    end unsafe

    if nsArray is not nothing then
      return _listAsString(ListFromNSArray(nsArray), "\n")
    else
      return ""
    end if
  end handler


  /**
  Summary: Provides a return-delimited list of user preferred languages.

  Description:

  Returns: Return-delimited list
  */
  private handler NSSpellCheckerGetUserPreferredLanguages() returns String
    variable sharedObject as ObjcObject
    variable nsArray as optional ObjcObject

    unsafe
      put ObjC_NSSpellCheckerSharedSpellChecker() into sharedObject
      put ObjC_NSSpellCheckerUserPreferredLanguages(sharedObject) into nsArray
    end unsafe

    if nsArray is not nothing then
      return _listAsString(ListFromNSArray(nsArray), "\n")
    else
      return ""
    end if
  end handler


  public handler NSSpellCheckerGetAutomaticallyIdentifiesLanguages() returns Boolean
    variable tBoolean as Boolean

    unsafe
      put ObjC_NSSpellCheckerGetAutomaticallyIdentifiesLanguages(_sharedObject()) into tBoolean
    end unsafe

    return tBoolean
  end handler


  public handler NSSpellCheckerSetAutomaticallyIdentifiesLanguages(in pBoolean as Boolean) returns nothing
    unsafe
      ObjC_NSSpellCheckerSetAutomaticallyIdentifiesLanguages(_sharedObject(), pBoolean)
    end unsafe
  end handler


  public handler NSSpellCheckerGetLanguage() returns String
    variable tLanguage as optional ObjcObject

    unsafe
      put ObjC_NSSpellCheckerGetLanguage(_sharedObject()) into tLanguage
    end unsafe

    return _objcToString(tLanguage)
  end handler


  /**
  Summary: Sets the language used for spell checking.

  Parameters:
  pLangCode: The language to use for spell check.

  Description:
  Return true if the language is available in the pop-up list. False otherwise.

  See the following url for language code information:
  https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPInternational/LanguageandLocaleIDs/LanguageandLocaleIDs.html#//apple_ref/doc/uid/10000171i-CH15-SW1

  Returns: Boolean
  */
  public handler NSSpellCheckerSetLanguage(in pLangCode as String) returns Boolean
    unsafe
      return ObjC_NSSpellCheckerSetLanguage(_sharedObject(), StringToNSString(pLangCode))
    end unsafe
  end handler


  private handler NSSpellCheckerCountWordsInString(in pString as String, in pLanguage as String) returns Number
    variable tCount as Number
    variable tLanguage as ObjcObject

    if pLanguage is "" then
      unsafe
        put ObjC_NSSpellCheckerGetLanguage(_sharedObject()) into tLanguage
      end unsafe
    else
      put StringToNSString(pLanguage) into tLanguage
    end if

    unsafe
      put ObjC_NSSpellCheckerCountWordsInString(_sharedObject(), StringToNSString(pString), tLanguage) into tCount
    end unsafe

    return tCount
  end handler


  /**
  Summary: Returns the char indexes of the first misspelled word in a string of text.

  Parameters:
  pString: The string to spell check.
  pStartAt: The character to start at.

  Description:

  Returns: Comma-delimited list of two numbers. The first number is the starting char index of the first misspelled word. The second number is the ending char index of the misspelled word.
  */
  private handler NSSpellCheckerCheckSpellingOfString(in pString as String, in pStartingAt as optional Number) returns String
    variable tRange as optional NSRange
    variable tRangeList as optional List

    // LC is 1-based. Obj-C is 0-based
    if pStartingAt is nothing then
      put 1 into pStartingAt
    end if
    put the maximum value of [0, pStartingAt-1] into pStartingAt

    unsafe
      put ObjC_NSSpellCheckerCheckSpellingOfString(_sharedObject(), StringToNSString(pString), pStartingAt) into tRange
    end unsafe

    if not NoErrorFound(tRange) then
      put tRange into tRangeList
    end if

    if tRangeList is not nothing then
      return (element 1 of tRangeList + 1) formatted as string \
            & "," & \
            (element 1 of tRangeList + element 2 of tRangeList) formatted as string
    else
      return ""
    end if
  end handler


  /**
  Summary: Returns the char indexes of the first misspelled word in a string of text.

  Parameters:
  pString: The string to spell check.
  pStartAt: The character to start at.

  Description:

  Returns: Comma-delimited list of two numbers. The first number is the starting char index of the first misspelled word. The second number is the ending char index of the misspelled word.
  */
  private handler NSSpellCheckerCheckSpellingOfStringWithOptions(in pString as String, in pStartingAt as optional Number, \
        in pLanguage as optional String, in pWrapFlag as Boolean, in pDocTag as optional Number, out rWordCount as Number) returns String
    variable tRange as optional NSRange
    variable tRangeList as optional List
    variable tLanguage as optional ObjcObject

    // LC is 1-based. Obj-C is 0-based
    if pStartingAt is nothing then
      put 1 into pStartingAt
    end if
    put the maximum value of [0, pStartingAt-1] into pStartingAt

    if pLanguage is nothing or pLanguage is empty then
      put nothing into tLanguage
    else
      put StringToNSString(pLanguage) into tLanguage
    end if

    if pDocTag is nothing then
      put 0 into pDocTag
    end if

    unsafe
      put ObjC_NSSpellCheckerCheckSpellingOfStringWithOptions(_sharedObject(), StringToNSString(pString), \
            pStartingAt, tLanguage, pWrapFlag, pDocTag, rWordCount) into tRange
    end unsafe

    if not NoErrorFound(tRange) then
      put tRange into tRangeList
    end if

    if tRangeList is not nothing then
      return (element 1 of tRangeList + 1) formatted as string \
            & "," & \
            (element 1 of tRangeList + element 2 of tRangeList) formatted as string
    else
      return ""
    end if
  end handler


   /**
  Summary:

  Parameters:
  pString: The string
  pStartAt: The character to start at.

  Description:

  Returns: Comma-delimited list of two numbers. The first number is the starting char index of the first misspelled word. The second number is the ending char index of the misspelled word.
  */
  private handler NSSpellCheckerGuessesForWordRange(in pString as String, in pStartingAt as optional Number, in pLength as optional Number, \
        in pLanguage as String, in pDocTag as optional Number) returns String
    variable tRange as NSRange
    variable tLanguage as optional ObjcObject
    variable tGuessesNSArray as ObjcId
    variable tGuessesList as List
    variable tGuesses as String

    // NSRange is [Location, Length]
    if pStartingAt is nothing then
      put 1 into pStartingAt
    end if
    put the maximum value of [0, pStartingAt-1] into pStartingAt

    if pLength is nothing then
      put the number of chars in pString into pLength
    end if
    put the maximum value of [1, pLength] into pLength

    put [pStartingAt, pLength] into tRange

    if pLanguage is nothing or pLanguage is "" then
      put nothing into tLanguage
    else
      put StringToNSString(pLanguage) into tLanguage
    end if

    if pDocTag is nothing then
      put 0 into pDocTag
    end if

    unsafe
      put ObjC_NSSpellCheckerGuessesForWordRange(_sharedObject(), tRange, StringToNSString(pString), \
            tLanguage, pDocTag) into tGuessesNSArray
    end unsafe

    if tGuessesNSArray is not nothing then
      return _listAsString(ListFromNSArray(tGuessesNSArray), "\n")
    else
      return ""
    end if
  end handler


  private handler _sharedObject() returns ObjcObject
    variable sharedObject

    unsafe
      put ObjC_NSSpellCheckerSharedSpellChecker() into sharedObject
    end unsafe

    return sharedObject
  end handler


  private handler _objcToString(in pObject as optional ObjcObject) returns String
    variable tString as String

    if pObject is not nothing then
      put StringFromNSString(pObject) into tString
    end if

    return tString
  end handler


  private handler _listAsString(in pList as List, in pDelimiter as String) returns String
    variable tString as String

    combine pList with pDelimiter into tString
    return tString
  end handler

end library
